{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf130
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww21880\viewh15300\viewkind1
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qr

\f0\fs24 \cf0 Joshua Basch\
Andrew Green\
June 8, 2015\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc
\cf0 \
Project Write-up\
Deliveries\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural
\cf0 \
	The core of Deliveries is the server-side database component. The database is powered by MySQL running on an Amazon Elastic Cloud Compute micro instance. The API is accessed through a fairly simple PHP script that translates HTTP requests into JSON data to return to the app. This allows complex series of database queries (e.g. locating a suitable courier) to be executed in succession while the app waits for a single result.\
\
	Unfortunately, due to difficulties getting Google Maps operational in the emulator (as neither of us owns an actual Android device), all latitude/longitude input is manual at present.\
\
	The app itself presents information to users in two main contexts: friends and parcels.\
	Under "Friends", users can see any confirmed friends or pending friend requests in either direction. Users can click the "add" button at the upper-right corner to start searching for a user to send a friend request to. Upon selecting a friend from the list, users see their friend's name, their friendship status, the friend's rating, buttons to rate the friend (provided a transaction has occurred between the user and their friend), and, if applicable, buttons to accept or decline a pending friend request.\
	Under "Parcels", users see any parcels pertaining to them, categorized by status. Users can click the "add" button at the upper-right corner to start creating a new parcel to send. The list of parcels is contextually filled based on the status of parcels relevant to the user. Upon selecting a parcel from the list, users can see (and, if contextually appropriate, set) all pertinent information on the parcel: its given name, its source, destination, courier (if applicable), current carrier, location and time of the next rendezvous, and any buttons to perform relevant actions (initiate a rendezvous request, accept or decline a rendezvous, or finalize an exchange.\
\
	User locations are automatically updated on the server in the background by a periodically running background service. This insures that any distance calculations for finding a courier performed on the server are as up-to-date and accurate as possible.}